#!/bin/bash

# Syntax highlighting based on file extension default
SYNTAX=true

# Any file extensions you want to be excluded from syntax highlighting.
# This has highest priority when deciding whether to do syntax.
EXLUDE_SYNTAX='(gif|jpg|jpeg|png|pdf|exe|iso|tar|gz|bz2|rar|zip|7z|pub)'

# Force any file extension in REPLACE_WHAT with corresponding REPLACE_WITH
REPLACE_WHAT=(erb)
REPLACE_WITH=(rb)

# The domain to upload to
DOMAIN='gobin.io'

function help {
    if [ "$SYNTAX" = true ]; then
        syntax="(DEFAULT)"
    else
        nosyntax="(DEFAULT)"
    fi

    echo "Usage: `basename $0` FILE [HORDE] 
        
Uploads FILE to $DOMAIN and returns link with syntax highlighting param
attached based of file extension.  Will copy link to clipboard if xsel (Linux)
or pbcopy (OSX) is installed.  If HORDE is given, FILE is uploaded to HORDE
which can be accessed at http://$DOMAIN/h/HORDE

  -s, --syntax          enable syntax highlighting $syntax
      --nosyntax        disable syntax highlighting $nosyntax
"
}

# Verfiy REPLACE Arrays are the same length
if [[ "${#REPLACE_WHAT[@]}" != "${#REPLACE_WITH[@]}" ]]; then
    echo "Error: REPLACE_WHAT and REPLACE_WITH must be the same lengths"
    exit 1
fi

# Handle arguments like I handle your mom... dirty
for arg in "$@"; do
    if [[ "$arg" = "-h" || "$arg" = "--help" ]]; then
        help
        exit
    fi
    if [[ "$arg" = "-s" || "$arg" = "--syntax" ]]; then
        SYNTAX=true
        continue
    fi
    if [[ "$arg" = "--nosyntax" ]]; then
        SYNTAX=false
        continue
    fi
    # FILE: first positional argument
    if [ -z $FILE ]; then
        FILE=$arg
        continue
    fi
    if [ -z $HORDE ]; then
        HORDE=$arg
    fi
done

# Verify file operand exists
if [ -z $FILE ]; then
    echo "Error: missing file operand"
    echo ""
    help
    exit 1
fi

# Verify file
if ! [ -f $FILE ]; then
    echo "Error: cannot stat '$1': No such file or directory"
    echo ""
    help
    exit 1
fi

# Verify horde name
if ! [[ $HORDE =~ ^[a-zA-Z]*$ ]]; then
    echo "Error: horde name must contain only letters"
    echo ""
    help
    exit 1
fi

# Check if in extension is in exclude list
if [[ $FILE =~ \.$EXLUDE_SYNTAX$ ]]; then
    SYNTAX=false
fi


# Deal with syntax
formatting=''
if [ "$SYNTAX" = true ]; then
    # Parse extension with exludes
    if [[ $FILE =~ \.[a-zA-Z]+$ ]]; then
        language=`echo $FILE | sed -rn 's/.*\.([a-zA-Z]+$)/\1/p'`
    fi
    
    # Handle replaces. It's nasty, I know
    if [ -n "$language" ]; then
        #length=${#REPLACE_WHAT[@]}
        for i in "${!REPLACE_WHAT[@]}"; do
            if [[ "${REPLACE_WHAT[$i]}" = "$language" ]]; then
                language=${REPLACE_WITH[$i]}
                break
            fi
        done
    fi
    
    # Give user chance to change language
    if [ -z "$language" ]; then
        read -p "Language syntax highlighting: " formatting
    else
        read -p "Language syntax highlighting (default=$language): " formatting 
    fi
    
    # Deal with users response
    if [ -n "$formatting" ]; then
        formatting='?'$formatting
    elif [ -n "$language" ]; then
        formatting='?'$language
    fi
fi

# Upload and get link
link=`cat $FILE | curl -F 'gob=<-' http://gobin.io/$HORDE 2>/dev/null | tr -d '\n'`$formatting
# Copy link to clipboard if xsel installed
if xsel -v foo >/dev/null 2>&1; then
    echo $link | tr -d '\n' | xsel -b -i
elif pbcopy -help >/dev/null 2>&1; then
    echo $link | tr -d '\n' | pbcopy
fi

# Print out link
echo $link
exit
